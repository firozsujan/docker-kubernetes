user: docker login -u firozbjit
pass: dckr_pat_PW9PcvpSJ__D5EBZam8x1N85LYs

Volume:
docker volume create volumeName
docker volume ls
removeVolume: docker volume rm volumeName
run a container that will use the volume:
		d for detach		containerName volumeNameWithPath imageName
	docker run -d --name voltest -v myvol:/app nginx:latest
Connect to the instance with bash:
docker exec -it voltest bash

stop and remove the container:
docker stop voltest
docker rm voltest

docker compose:
Build the images: docker compose build
Start the containers: docker compose start
Stop the containers: docker compose stop
Build and start: docker compose up -d 
list what's running: docker compose ps
remove from memory: docker compose rm
stop and remove: docker compose down
get the logs: docker compose logs
run a command in a container: docker compose exec [container] bash

run an instance as a project: docker compose --porject-name test1 up -d
shortcut: docker compose -p test2 up -d 
list running projects: docker compose ls 
copy files from the container: docker compose cp [containerID]:[SRC_PATH] [DEST_PATH]
copy files to the container: docker compose cp [SRC_PATH] [containerID]:[DEST_PATH]
logs of service inside container: docker compose logs -f [serviceName]

push command:
docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
docker push firozbjit/exopress:tagname
eg: docker build -t firozbjit/exopress:v1 .
	docker tag 518a41981a6a firozbjit/myImage
    docker push firozbjit/myImage
docker pull:
	docker pull firozbjit/javaspringboot:v1
	
kubernetes:
kubectl cluster-info
get the current context: kubectl config current-context
list all context: kubectl config get-contexts
set the current context: kubectl config use-context [contextname]
delete a context from the config file: kubectl config delete-context [contextname]
rename: kubectl config rename-context [old-name] [new-name]

resource commands:
kubectl run mynginx --image=nginx --port=80
kubectl create deploy mynginx --image=nginx --port=80 --replicas=3
kubectl create service nodeport myservice --targetPort=8080
kubectldelete pod nginx

imperative way:
kubectl create -f deploy-example.yaml
declarative way:
kubectl create -f deploy-example.yaml

kubctl-Namespace cheat sheet:
list all namespaces: kubtl get namespaces
shortcut: kubectl get ns
set the current context to use a namespace: kubectl config set-context --current --namespace=[namespaceName]
create a namespace: kubectl create ns [namespaceName]
delete: kubctl delete ns [namespaceName]
list all pods in all namespaces: kubectl get pods --all-namespaces
get the pods from the default namespace: kuctl get pods --namespace=kube-system or kubectl get pods -n kube-system
change namespace: kubectl config set-context --current --namespace=kube-system
nodes:
kubectl get nodes
kubectl describe node 

pod:
create pod: kubectl create -f [pod-definition.yml]
run a pod: kubectl run [podname] --image=busybox -- /bin/sh -c "sleep 3600"
list the running pods: kubectl get pods 
Same but with more info: kubectl discribe pod [podname]
Extract the pod definition in YAML and save it to a file: kubectl get pod [podname] -o yaml > file.yaml
Interactive mode: kubectl exec -it [podname] -- sh 
Delete a pod: kubectl delete -f [pod-definition.yml] 
kubectl delete pod [podname]
kubectl delete pod mybox --grace-period=0 --force

Create the deployment: kubectl apply -f myapp.yaml
Wait for the main pod to come up: kubectl get pods 
Connect to the Nginx container: kubectl exec -it init-demo -- /bin/bash
hit the default webpage: curl localhost
Get th ip of the pod: kubectl get po -o wide
Get the service endpoint: kubectl get ep myservice 
port forward to the service: kubectl port-forward service/myservice 8080:80
Ctl-c for stopping the port forward 

multi container pods cheat sheet
Create a pod: kubectl create -f [pod-definition.yml]
Exec into a pod: kubctl exec -it [podname] -c [containername]
get the logs for a container: kubectl logs [podname] -c [containername]
connect to specific container: kubectl exec -it [podname] --container [containername] -- /bin/sh 

ReplicaSet
Create replicaSet: kubectl apply -f [definition.yaml]
list replicatest: kubectl get rs
get info: kubectl describe rs [rsName]
delete a replicaSet: kubectl delete -f [definition.yaml]
same but using the replicaSetName: kubectl delete rs [rsName]

deployments cheat sheet
the imperative way: kubectl create deploy [deploymentName] --image=busybox --replicas=3 --port=80
create deployment: kubectl apply -f [definition.yaml] 
list deployments: kubectl get deploy 
get info: kubectl describe deploy [deploymentName] 
List replicasets: kubectl get deploy 
get info: kubectl describe deploy [deploymentName] 
List replicasets: kubectl get rs 
delete a deployment: kubectl delete -f [definition.yaml] 
same but using the deployment name: kubectl delete deploy [deploymentName] 

daemonSets cheat sheet
create: kubectl apply -f [definition.yaml]
list: kubectl get ds
getInfo: kubectl describe ds [rsName]
delete: dubectl delete -f [definition.yaml]
same but using the daemonSet name: kubectl delete ds [rsName]
kubectl get pods --selector=app=demonset-example -o wide

statefulSets cheat sheet
create: kubectl apply -f [definition.yaml]
list: kubectl get sts
getInfo: kubectl describe sts [rsName]
delete: dubectl delete -f [definition.yaml]
same but using the daemonSet name: kubectl delete sts [rsName]
kubectl get pods --selector=app=demonset-example -o wide
kubectl get pvc
kubectl delete pvc [pvcName]

jobs cheat sheet:
the imperative way: kubectl create job [jobName] --image=busybox
create: kubectl apply -f [definition.yaml] 
list: kubectl get job 
get info: kubectl describe job [jobName] 
delete: kubectl delete -f [definition.yaml] / kubectl delete job [jobName] 

cornJobs cheat sheet
the imperative way: kubectl create cornjob [jobName] --image=busybox --schedule="*/1 * * * *" -- bin/sh -c "date;"
create: kubectl apply -f [definition.yaml] 
list: kubectl get cj 
get info: kubectl describe cj [jobName] 
delete: kubectl delete -f [definition.yaml] / kubectl delete cj [jobName]

rolling update cheat sheet
Update a deployment: kubectl apply -f [definition.yaml]
get the progress of the update: kubectl rollout status
get the history of the deployment: kubectl rollout history deployment [deploymentname]
rollback a deployment: kubectl rollout undo [deploymentname]
rollback to a revision number: kubectl rollout undo [deploymentName] --to-revision=[revision#]

clusterIP:
create a service to expose a pod: kubectl expose po [podName] --port=80 --target-port=8080 --name=frontend
create a service to expose a deployment: kubectl expose deploy [deployName] --port=80 --target-port=8080
deploy the service: kubectl apply -f [definition.yaml]
list: kubectl get svc
info: kubectl get svc -o wide
describe: kubectl describe svc [serviceName]
delete: kubectl delete -f [definition.yaml] / kubectl delete svc [serviceName]

nodeport cheat sheet
create a service to expose a pod: kubectl expose po [podName] --port=80 --target-port=8080 --type=NodePort
create a service to expose a deployment: kubectl expose deploy [deployName] --port=80 --target-port=8080
deploy the service: kubectl apply -f [definition.yaml]
list: kubectl get svc
info: kubectl get svc -o wide
describe: kubectl describe svc [serviceName]
delete: kubectl delete -f [definition.yaml] / kubectl delete svc [serviceName]

pv and pvc cheat sheet
deploy the PVs and PVCs: kubectl apply -f [definition.yaml]
pv list: kubectl get pv
pvc list: kubectl get pvc
describe: kubectl describe pv/pvc
delete: kubectl describe pv/pvc [name]

storageClass:
list: kubectl get sc 

configMaps cheat sheet:
kubectl create configmap literal-example --from-literal="city=Ann Arbor" --from-literal=state=Michigan
kubectl apply -f [cf.yaml]
from a file: kubectl create cm [name] --from-file=muconfig.txt
from a folder: kubectl create cm [name] --from-file=config/
list: kubectl get cm 
save a configMap in a YAML: kubectl get cm [name] -o YAML
delete a cm: kubectl delete -f [cf.yaml]

